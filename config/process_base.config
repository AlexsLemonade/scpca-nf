// Resource maximum settings
params.max_cpus = 24
params.max_memory = 96.GB

process{
  memory = {check_memory(4.GB * task.attempt, params.max_memory)}

  errorStrategy = { task.attempt < 3 ? 'retry' : 'finish' }
  maxRetries = 2
  maxErrors = '-1'

  withLabel: mem_8 {
    memory = {check_memory(8.GB * task.attempt, params.max_memory)}
  }
  withLabel: mem_16 {
    memory = {check_memory(16.GB * task.attempt, params.max_memory)}
  }
  withLabel: mem_24 {
    memory = {check_memory(24.GB * task.attempt, params.max_memory)}
  }
  withLabel: mem_32 {
    memory = {check_memory(32.GB * task.attempt, params.max_memory)}
  }
  withLabel: mem_96 {
    memory = {check_memory(48.GB  + 48.GB * task.attempt, params.max_memory)}
  }
  withLabel: max_mem {
    memory = {task.attempt > 1 ? check_memory(96.GB, params.max_memory) : params.max_memory}
  }
  withLabel: cpus_2  {
    cpus = {check_cpus(2, params.max_cpus)}
  }
  withLabel: cpus_4  {
    cpus = {check_cpus(4, params.max_cpus)}
  }
  withLabel: cpus_8  {
    cpus = {check_cpus(8, params.max_cpus)}
  }
  withLabel: cpus_12 {
    cpus = {check_cpus(12, params.max_cpus)}
  }
  withLabel: cpus_24 {
    cpus = {check_cpus(24, params.max_cpus)}
  }
}


// Resource check functions
def check_memory(memory, max_memory){
  memory = memory as nextflow.util.MemoryUnit
  max_memory = max_memory as nextflow.util.MemoryUnit
  memory < max_memory ? memory : max_memory
}

def check_cpus(cpus, max_cpus){
  cpus = cpus as int
  max_cpus = max_cpus as int
  cpus < max_cpus ? cpus : max_cpus
}
