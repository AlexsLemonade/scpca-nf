manifest {
  name = 'scpca-nf'
  description = 'A nextflow workflow for processing single-cell RNA-seq data as part of the ScPCA project.'
  homePage = 'https://github.com/AlexsLemonade/scpca-nf'
  doi = '10.1101/2024.04.19.590243'
  mainScript = 'main.nf'
  defaultBranch = 'main'
  nextflowVersion = '>=24.09'
  version = 'v0.8.7'
  contributors = [
    [
      name: "Allegra Hawkins",
      affiliation: "Alex's Lemonade Stand Foundation",
      contribution: ["author"],
      github: "https://github.com/allyhawkins",
      orcid: "https://orcid.org/0000-0001-6026-3660",
    ],
    [
      name: "Joshua A. Shapiro",
      affiliation: "Alex's Lemonade Stand Foundation",
      contribution: ["author"],
      github: "https://github.com/jashapiro",
      orcid: "https://orcid.org/0000-0002-6224-0347",
    ],
    [
      name: "Stephanie J. Spielman",
      affiliation: "Alex's Lemonade Stand Foundation",
      contribution: ["author"],
      github: "https://github.com/sjspielman",
      orcid: "https://orcid.org/0000-0002-9090-4788",
    ],
  ]
}

// global parameters for workflows
params {
  // Input data table
  run_metafile = "run_metadata.tsv"
  sample_metafile = "sample_metadata.tsv"


  // Output base directory
  outdir = "scpca_out"

  // create paths to output folders
  checkpoints_dir = "${params.outdir}/checkpoints"
  results_dir = "${params.outdir}/results"

  // File containing cellhash pool sample/antibody descriptions
  cellhash_pool_file = "multiplex_pools.tsv"
  // Celltype metadata file with cell type references to use for each project
  project_celltype_metafile = "project_celltype_metadata.tsv"

  // run_ids are comma separated list to be parsed into
  // a list of run ids, library ids, and or sample_ids
  // or "All" to process all samples in the metadata file
  run_ids = "All"
  // to run all samples in a project use that project's submitter name
  project = null
  // if running the merge workflow, include all runs in a project by default
  merge_run_ids = "All"

  // Processing options //
  // alevin-fry quant resolution method: default is cr-like, can also use full, cr-like-em, parsimony, and trivial
  af_resolution = 'cr-like-em'
  // if alevin or salmon mapping has already been performed and output files exist, mapping is skipped by default. Use `--repeat_mapping` to perform mapping again
  repeat_mapping = false
  // if genetic demultiplexing has been performed and output files exist, genetic demux is skipped by default. Use `--repeat_genetic_demux` to run these steps.
  repeat_genetic_demux = false
  // skip genetic demultiplexing steps, even if bulk data is present
  skip_genetic_demux = false
  // alevin-fry outputs are not published by default. Use `--publish_fry_outs` to publish these files to the `checkpoints` folder.
  publish_fry_outs = false
  // include only spliced reads in counts matrix, by default both unspliced and spliced reads are totaled and found in `counts` asasy of returned SingleCellExperiment object
  spliced_only = false
  // specify whether or not to incorporate cell type annotations
  perform_celltyping = false
  // if cell type annotations already exist, skip cell type classification with SingleR and CellAssign
  repeat_celltyping = false

  // random number seed for filtering and post-processing (0 means use system seed)
  seed = 2021

  // post processing SCE options //
  // probability compromised cutoff used for filtering cells with miQC
  prob_compromised_cutoff = 0.75
  // minimum number of genes per cell cutoff used for filtering cells
  gene_cutoff = 200
  // number of high variance genes to use for dimension reduction
  num_hvg = 2000
  // number of principal components to retain in the returned SingleCellExperiment object
  num_pcs = 50

  // SCE clustering options //
  // default graph-based clustering algorithm
  cluster_algorithm = "louvain"
  // default weighting scheme for graph-based clustering
  cluster_weighting = "jaccard"
  // default nearest neighbors parameter for graph-based clustering
  nearest_neighbors = 20

  // Cell type annotation options //
  // celldex reference label used for SingleR reference building
  singler_label_name = "label.ont"

  // Merge workflow-specific options //
  // if later steps fail, you can use `--reuse_merge` reuse the merged RDS object during a rerun
  reuse_merge = false
  max_merge_libraries = 100
}

// Docker container images
includeConfig 'config/containers.config'

// reference and annotation parameters
includeConfig 'config/reference_paths.config'

// Load base process config with labels
includeConfig 'config/process_base.config'

profiles {
  standard {
    process.executor = 'local'
    docker.enabled = true
    docker.fixOwnership = true
  }
  cavatica {
    params.cellhash_pool_file = ""
    // Celltype metadata file with cell type references to use for each project
    params.project_celltype_metafile = ""
  }
  // stub testing profile
  stub {
    includeConfig 'config/profile_stub.config'
  }
  // settings to process example data
  example {
    includeConfig 'config/profile_example.config'
  }
}

// CCDL-specific profiles
includeConfig 'config/ccdl_profiles.config'
