manifest{
  name = 'scpca-nf'
  description = 'A nextflow workflow for processing single-cell RNA-seq data as part of the ScPCA project.'
  author = "Childhood Cancer Data Lab, Alex's Lemonade Stand Foundation"
  homePage = 'https://github.com/AlexsLemonade/scpca-nf'
  mainScript = 'main.nf'
  defaultBranch = 'main'
  version = 'v0.3.1'
}

// global parameters for workflows
params {
  // Input data table
  run_metafile = "run_metadata.tsv"
  
  // Output base directory
  outdir = "scpca_out"

  // create paths to output folders
  checkpoints_dir = "${params.outdir}/checkpoints"
  results_dir = "${params.outdir}/results"

  // File containing cellhash pool sample/antibody descriptions
  cellhash_pool_file = ""

  // run_ids are comma separated list to be parsed into 
  // a list of run ids, library ids, and or sample_ids
  // or "All" to process all samples in the metadata file
  run_ids = "All"
  // to run all samples in a project use that project's submitter name
  project = ""

  // Processing options
  af_resolution = 'cr-like-em' // alevin-fry quant resolution method: default is cr-like, can also use full, cr-like-em, parsimony, and trivial
  repeat_mapping = false // if alevin or salmon mapping has already been performed and output files exist, mapping is skipped by default. Use `--repeat_mapping` to perform mapping again
  repeat_gdemux = false // if genetic demultiplexing has been performed and output files exist, genetic demux is skipped by default. Use `--repeat_gdemux` to run these steps. 
  publish_fry_outs = false // alevin-fry outputs are not published by default. Use `--publish_fry_outs` to publish these files to the `checkpoints` folder. 

  seed = 2021   // random number seed for filtering (0 means use system seed)

  // Docker container images
  includeConfig 'config/containers.config'

  // reference and annotation parameters
  includeConfig 'config/reference_paths.config'

}

// Load base process config with labels
includeConfig 'config/process_base.config'

profiles{
  standard {
    process.executor = 'local'
    docker.enabled = true
    docker.userEmulation = true
  }
  // AWS batch profile
  batch {
    includeConfig 'config/profile_awsbatch.config'
  }
  // CCDL-specific settings
  ccdl{
    includeConfig 'config/profile_ccdl.config'
  }
}
